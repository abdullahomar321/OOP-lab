#include <iostream>

class Polynomial {
private:
    int* coefficients;
    int degree;

public:
    Polynomial() : coefficients(nullptr), degree(0) {}

    Polynomial(int deg, int* coeffs) : degree(deg) {
        coefficients = new int[degree + 1];
        for (int i = 0; i <= degree; ++i) {
            coefficients[i] = coeffs[i];
        }
    }

    Polynomial(const Polynomial& other) : degree(other.degree) {
        coefficients = new int[degree + 1];
        for (int i = 0; i <= degree; ++i) {
            coefficients[i] = other.coefficients[i];
        }
    }

    ~Polynomial() {
        delete[] coefficients;
    }

    int evaluate(int x) const {
        int result = 0, power_of_x = 1;
        for (int i = 0; i <= degree; ++i) {
            result += coefficients[i] * power_of_x;
            power_of_x *= x;
        }
        return result;
    }

    Polynomial add(const Polynomial& other) const {
        int max_degree = std::max(degree, other.degree);
        int* result_coeffs = new int[max_degree + 1]();
        for (int i = 0; i <= degree; ++i) result_coeffs[i] += coefficients[i];
        for (int i = 0; i <= other.degree; ++i) result_coeffs[i] += other.coefficients[i];
        return Polynomial(max_degree, result_coeffs);
    }

    Polynomial subtract(const Polynomial& other) const {
        int max_degree = std::max(degree, other.degree);
        int* result_coeffs = new int[max_degree + 1]();
        for (int i = 0; i <= degree; ++i) result_coeffs[i] += coefficients[i];
        for (int i = 0; i <= other.degree; ++i) result_coeffs[i] -= other.coefficients[i];
        return Polynomial(max_degree, result_coeffs);
    }

    Polynomial multiply(const Polynomial& other) const {
        int result_degree = degree + other.degree;
        int* result_coeffs = new int[result_degree + 1]();
        for (int i = 0; i <= degree; ++i) {
            for (int j = 0; j <= other.degree; ++j) {
                result_coeffs[i + j] += coefficients[i] * other.coefficients[j];
            }
        }
        return Polynomial(result_degree, result_coeffs);
    }

    void display() const {
        for (int i = 0; i <= degree; ++i) {
            if (coefficients[i] != 0) {
                if (i > 0 && coefficients[i] > 0) std::cout << "+";
                std::cout << coefficients[i];
                if (i < degree) std::cout << "x^" << degree - i << " ";
            }
        }
        std::cout << std::endl;
    }
};

int main() {
    int coeffs1[] = {1, 0, -2};
    Polynomial p1(2, coeffs1);  // x^2 - 2
    p1.display();

    int coeffs2[] = {2, -1, 3};
    Polynomial p2(2, coeffs2);  // 2x^2 - x + 3
    p2.display();

    Polynomial p3 = p1.add(p2);
    p3.display();

    Polynomial p4 = p1.subtract(p2);
    p4.display();

    Polynomial p5 = p1.multiply(p2);
    p5.display();

    std::cout << "Evaluation of p1 at x = 2: " << p1.evaluate(2) << std::endl;

    return 0;
}
