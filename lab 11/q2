#include <iostream>
#include <vector>
#include <stdexcept>

class DimensionMismatchException : public std::exception {
public:
    const char* what() const noexcept override {
        return "Matrix dimensions do not match for the operation.";
    }
};

template <typename T>
class Matrix {
private:
    std::vector<std::vector<T>> data;
    size_t rows, cols;

public:
    Matrix(size_t r, size_t c) : rows(r), cols(c) {
        data.resize(r, std::vector<T>(c));
    }

    void set(size_t r, size_t c, T value) {
        if (r >= rows || c >= cols) throw std::out_of_range("Index out of bounds");
        data[r][c] = value;
    }

    T get(size_t r, size_t c) const {
        if (r >= rows || c >= cols) throw std::out_of_range("Index out of bounds");
        return data[r][c];
    }

    Matrix<T> operator+(const Matrix<T>& other) const {
        if (rows != other.rows || cols != other.cols) {
            throw DimensionMismatchException();
        }

        Matrix<T> result(rows, cols);
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < cols; ++j) {
                result.set(i, j, data[i][j] + other.data[i][j]);
            }
        }
        return result;
    }

    Matrix<T> operator*(const Matrix<T>& other) const {
        if (cols != other.rows) {
            throw DimensionMismatchException();
        }

        Matrix<T> result(rows, other.cols);
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < other.cols; ++j) {
                T sum = 0;
                for (size_t k = 0; k < cols; ++k) {
                    sum += data[i][k] * other.data[k][j];
                }
                result.set(i, j, sum);
            }
        }
        return result;
    }
};

int main() {
    Matrix<int> mat1(2, 2);
    mat1.set(0, 0, 1);
    mat1.set(0, 1, 2);
    mat1.set(1, 0, 3);
    mat1.set(1, 1, 4);

    Matrix<int> mat2(2, 2);
    mat2.set(0, 0, 5);
    mat2.set(0, 1, 6);
    mat2.set(1, 0, 7);
    mat2.set(1, 1, 8);

    try {
        Matrix<int> result = mat1 + mat2;
        std::cout << "Addition result: " << result.get(0, 0) << ", " << result.get(0, 1) << std::endl;

        Matrix<int> mult_result = mat1 * mat2;
        std::cout << "Multiplication result: " << mult_result.get(0, 0) << std::endl;
    } catch (const DimensionMismatchException& e) {
        std::cout << "Error: " << e.what() << std::endl;
    }

    return 0;
}
